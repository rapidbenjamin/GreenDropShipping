<?php

namespace App\Http\Controllers;
use Illuminate\Support\Facades\Auth;
use Illuminate\Http\Request;
use App\Libraries\Magento\MProduct;
use App\Libraries\Magento\MCategory;
use App\Category;
use App\Products;
use App\MyProducts;
use App\ImportList;
use App\Libraries\Magento\MOrder;
use App\Libraries\Shopify\ShopifyAdminApi;
use Exception;
use Illuminate\Support\Facades\DB;
use App\Order;
use App\OrderDetails;
use App\OrderShippingAddress;
use App\User;
use App\Token;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Storage;

class SyncController extends Controller
{

    public function index()
    {
        return view('settings');
    }

    public function syncStock()
    {
        $t = time();
        echo ('Start: ' . date("h:i:s", $t));


        //UPDATE STOCK FROM MAGENTO TO MIDDLEWARE
        $inventory = collect(DB::connection('mysql_magento')->select('SELECT * FROM `mg_inventory_stock_1`'))->where('is_salable', 1);
        foreach ($inventory as $item) {
            $product = Products::find($item->product_id);
            if ($product != null && $product->stock != $item->quantity) {
                //Writing log
                self::GDSLOG('Cron Stock', $product->name.' Last Stock: '.$product->stock.' New Stock: '.$item->quantity);
                
                //Update Product Stock
                $product->stock = $item->quantity;
                $product->save();
            }
        }

        //Retrieving location_id and inventory_item_id to store inventory
        $myProducts = MyProducts::whereNotNull('inventory_item_id_shopify')->get();
        foreach ($myProducts as $mp) {
            try {
                $merchant = User::find($mp->id_customer);
                $res = ShopifyAdminApi::getLocationIdForIvewntory($merchant, $mp->inventory_item_id_shopify);
                $mp->location_id_shopify = $res['location_id'];
                $mp->save();
                echo $res['result'] . '<br>';
                sleep(10);
            } catch (Exception $ex) {
                echo $ex->getMessage();
            }
        }

        //UPDATE STOCK IN SHOPIFY STORES
        foreach ($myProducts as $mp) {
            // Oscar desarrolla para cada producto actualizar el stock en cada tienda shopify  
            //Este es el punto 18 del test
            try {
                $merchant = User::find($mp->id_customer);
                $res = ShopifyAdminApi::updateProductIventory($merchant, $mp->id_product, $mp->location_id_shopify, $mp->inventory_item_id_shopify);
                echo $res['result'] . '<br>';
                sleep(10);
            } catch (Exception $ex) {
                echo $ex->getMessage();
            }
        }

        $t = time();
        echo ('End: ' . date("h:i:s", $t));
        return 'success';
    }

    public function arregloSku()
    {
        echo "<p>inicio del arreglo</p>";
        
        /*
        $myProducts = MyProducts::get();
        foreach ($myProducts as $mp) {
            $importId = $mp->id_imp_product;
            $productId = ImportList::where('id', $importId)->first();
            $pr = $productId["id_product"];
            $affected = DB::update('update my_products set id_product = ? where id_imp_product = ?', [$pr, $importId]);


            echo "<p>import id: " . $importId . " ProductId: " . $pr . "</p>";
        }
        $merchant = User::find(Auth::user()->id);
        $res = ShopifyAdminApi::getShopInformation($merchant);

        echo "<p>this is the result... </p>";
        echo "<p>Province... ".$res['province']."</p>";
       echo "<pre>".print_r($res)."</pre>";*/

/* TESTING ZONE **/

ECHO "<P>INICIA TESTING ZONE</P>";
/*
        // 1. Request deletion of customer data (customers/redact)
        //$shop_url = $request->shop_domain;
        $shop_url = 'merchant-gds2oscar.myshopify.com';


        // 2. customer email
        //$customer_email = $request->customer->email;
        $customer_email = 'oscar.lira@lievant.com';

        // 3. Orders to delete
        //$orders_to_redact = $request->orders_to_redact;
        $orders_to_redact = [2646263464094];

        // 4. delete customer information from order_shipping_address and order details and orders
        foreach ($orders_to_redact as $key => $otr) {
            $id_order = Order::select('orders.id')->where('id_shopify',$otr)->first();
            
            // A. delete from order shipping address
            $res1 = OrderShippingAddress::where('id_order',$id_order['id'])->delete();

            // B. delete from order detail
            $res2 = OrderDetails::where('id_order',$id_order['id'])->delete();

            // C. delete from orders
            $res3 = Order::where('orders.id',$id_order['id'])->delete();            

            echo "<p>id_order:  ".$id_order['id']." - id_shopify: ".$otr."</p>";
        }
        

        //return response()->json(['result' => true],200);
        



$res = 0; 


ECHO "<P>RESULTADO: ".$res."</P>";
*/

ECHO "<P>Lista los fulfillment services.</P>";

$user = User::where('id', 100)->first(); 

$result = ShopifyAdminApi::getFulfillmentServices($user);

echo "<pre>".print_r($result)."</pre>";





    }

    public function setTrackingNumber()
    {
        echo "<p>inicio del tracking number</p>";
        $orders = Order::whereNotNull('magento_entity_id')->whereNull('tracking_code')->get();
        foreach ($orders as $order) {
            $querymg = DB::connection('mysql_magento')->select('SELECT * 
            FROM `mg_sales_shipment_track` WHERE order_id = ' . $order->magento_entity_id);
            if (count($querymg)) {
                //Update tracking number in middleware DB
                $order->tracking_code = $querymg[0]->track_number;
                $order->save();
                
                //Update fulfillment in shopify store

                $user = User::where('id', $order->id_customer)->first(); 

                //Step 1.  Get shopify order to know item lines
                $shopify_order = ShopifyAdminApi::getOrderInformation($user,$order->id_shopify);
                $i = 0;
                foreach($shopify_order['body']['order']['line_items'] as $li){
                    
                    //Step 2.  Get shopify inventory item id
                    $iii = ShopifyAdminApi::getInventoryItemId($user,$li['variant_id']);
                    
                    //Step 3. Get shopify item location id
                    $location = ShopifyAdminApi::getItemLocationId($user,$iii['body']['variant']['inventory_item_id']);

                    //Step 4. Post Tracking Number in shopify
                    $fulfill = ShopifyAdminApi::fulfillItem($user,$location['body']['inventory_levels'][0]['location_id'],$order->tracking_code,$li['id'],$order->id_shopify);

                    $lines[$i]['line_item_id'] = $li['id'];
                    $lines[$i]['variant_id'] = $li['variant_id'];
                    $lines[$i]['inventory_item_id'] = $iii['body']['variant']['inventory_item_id'];
                    $lines[$i]['location_id'] = $location['body']['inventory_levels'][0]['location_id'];
                    //$lines[$i]['fulfill_status'] = $fulfill;
                    $i++;
                }

                echo "<pre>".print_r($fulfill)."</pre>";


                //Outputs
                echo 'Tracking updated for order_id' . $order->id;
                Log::info('Tracking updated for order_id' . $order->id);
            }
        }
    }

    public function syncCategories()
    {
        $filter = [
            'searchCriteria[filterGroups][1][filters][0][field]' => 'status',
            'searchCriteria[filterGroups][1][filters][0][value]' => 1,
            'searchCriteria[filterGroups][1][filters][0][condition_type]' => "eq"
        ];
        $categoriesIds = [];
        $t = time();
        echo ('Start: ' . date("h:i:s", $t));
        $this->getRecursiveCategories(json_decode(MCategory::get($filter))->children_data, $categoriesIds);
        DB::table('categories')->whereNotIn('id', $categoriesIds)->delete();
        $t = time();
        echo ('End: ' . date("h:i:s", $t));
        return 'success';
    }

    public function syncProducts()
    {

        $filter = [
            'searchCriteria[filterGroups][0][filters][0][field]' => 'attribute_set_id',
            'searchCriteria[filterGroups][0][filters][0][value]' => 10,
            'searchCriteria[filterGroups][0][filters][0][condition_type]' => "eq",
            'searchCriteria[filterGroups][1][filters][0][field]' => 'status',
            'searchCriteria[filterGroups][1][filters][0][value]' => 1,
            'searchCriteria[filterGroups][1][filters][0][condition_type]' => "eq"
        ];
        $productsIds = [];
        $t = time();
        echo ('Start: ' . date("h:i:s", $t));

        $continue = true;
        $page = 1;
        $Mtotal_count = $total_count = 0;
        while ($continue) {
            $Mproduct = json_decode(MProduct::get($filter, 255, $page));
            $Mitems = $Mproduct->items;
            $Mtotal_count = $Mproduct->total_count; //always the same
            foreach ($Mitems as $item) {
                try {
                    $productsIds[] = $item->id;
                    $product = Products::find($item->id);
                    if ($product == null) {
                        $product = new Products();
                        $product->id = $item->id;
                        $product->sku = $item->sku;
                    }
                    $product->id = $item->id;
                    $product->name = $item->name;
                    $product->price = $item->price;
                    //$product->stock = 0;
                    $product->brand = '';
                    $product->upc = '';
                    $product->image_url = '';
                    $product->weight = isset($item->weight) ? $item->weight : 0;
                    $product->type_id = $item->type_id;
                    $product->status = $item->status;
                    $product->visibility = $item->visibility;
                    $product->categories = json_encode(isset($item->extension_attributes->category_links) ? $item->extension_attributes->category_links : null);
                    $product->images = json_encode(isset($item->media_gallery_entries) ? $item->media_gallery_entries : null);
                    $product->stock_info = json_encode(isset($item->extension_attributes->stock_item) ? $item->extension_attributes->stock_item : null);
                    $product->attributes = json_encode(isset($item->custom_attributes) ? $item->custom_attributes : null);
                    $product->save();
                    $total_count++;
                    echo 'SKU: ' . $item->sku . '<br>';
                } catch (Exception $ex) {
                    echo 'Error' . $ex->getMessage() . '-' . $item->sku;;
                }
            }
            $page++;
            echo 'Num: ' . $total_count . '<br>';
            $continue = $total_count != $Mtotal_count;
        }
        DB::table('products')->whereNotIn('id', $productsIds)->delete();
        $t = time();
        echo ('End: ' . date("h:i:s", $t));
        return 'Success';
    }


    public function syncWP(){
        echo '<p>Iniciando sincronizacion de Wordpress</p>';

 
        //UPDATE TOKENS FROM WORDPRESS DB

        //1. Get collection of records from Wordpress
        $tokens = DB::connection('mysql_wp')
            ->select('SELECT 
                wp_rftpn0v78k_pmpro_membership_orders.id AS id_order,
                wp_rftpn0v78k_pmpro_membership_orders.code AS token,
                wp_rftpn0v78k_pmpro_membership_orders.user_id,
                wp_rftpn0v78k_pmpro_memberships_users.status,
                wp_rftpn0v78k_pmpro_memberships_users.enddate,
                wp_rftpn0v78k_users.display_name,
                wp_rftpn0v78k_users.user_email
                FROM wp_rftpn0v78k_pmpro_membership_orders
                JOIN wp_rftpn0v78k_pmpro_memberships_users ON wp_rftpn0v78k_pmpro_memberships_users.user_id = wp_rftpn0v78k_pmpro_membership_orders.user_id
                JOIN wp_rftpn0v78k_users ON wp_rftpn0v78k_users.id = wp_rftpn0v78k_pmpro_membership_orders.user_id
                WHERE wp_rftpn0v78k_pmpro_memberships_users.status = "active"
            ');

        //2. Clean Middeware token table
            $rows = Token::where('id','>',0)->delete();

        //3. Update table
            foreach ($tokens as $key => $tk) {
                if($tk->enddate != '0000-00-00 00:00:00'){
                $token = new Token;
                $token->token = $tk->token;
                $token->status = $tk->status;
                $token->id_order = $tk->id_order;
                $token->user_id = $tk->user_id;
                $token->enddate = $tk->enddate;
                $token->display_name = $tk->display_name;
                $token->user_email = $tk->user_email;
                $token->save();                   
                }

                echo '<p>Enddate: '.$tk->enddate.'</p>';
            }




        return 'Success';
    }

    public function getRecursiveCategories($children_data, &$categoriesIds)
    {
        //dd($children_data);
        foreach ($children_data as $Mcategory) {
            try {
                $categoriesIds[] = $Mcategory->id;
                $category = Category::find($Mcategory->id);
                if ($category == null) {
                    $category = new Category();
                    $category->id = $Mcategory->id;
                }
                $category->parent_id = $Mcategory->parent_id;
                $category->name = $Mcategory->name;
                $category->is_active = $Mcategory->is_active;
                $category->level = $Mcategory->level;
                $category->position = $Mcategory->position;
                $category->save();
                //echo 'Id: '. $category->id . '<br>';
                if (count($Mcategory->children_data)) {
                    $this->getRecursiveCategories($Mcategory->children_data, $categoriesIds);
                }
            } catch (Exception $ex) {
                echo 'Error' . $ex->getMessage();
            }
        }
    }

    public function updateStatusWhenCancelingMagento()
    {
        
        
        ECHO "<p>Starting sync process .... </p>";

        //Process canceled orders
        
        $orders = Order::where('fulfillment_status', 11)->whereNotNull('magento_order_id')->whereNotNull('magento_entity_id')->get();
        ECHO "<p>Orders Canceled Process... (".count($orders).")</p>";
        foreach ($orders as $order) {
            $orderM = DB::connection('mysql_magento')->select('SELECT * FROM `mg_sales_order` WHERE entity_id = ' . $order->magento_entity_id);
            if (count($orderM)) {
                if ($orderM[0]->status == 'canceled' && $orderM[0]->state == 'canceled') {
                    $order->fulfillment_status = 9;
                    $order->financial_status = 3;
                    $order->save();
                    echo 'order: ' . $order->id . ' has updated its status<br>';
                }
            }
        }

        //Update state Pending to Processing
        
        $orders = Order::where('fulfillment_status', 5)->whereNotNull('magento_order_id')->whereNotNull('magento_entity_id')->get();
        ECHO "<p>Updating pending orders... (".count($orders).")</p>";
        foreach ($orders as $order) {
            $orderM = DB::connection('mysql_magento')->select('SELECT * FROM `mg_sales_order` WHERE entity_id = ' . $order->magento_entity_id);
            if (count($orderM)) {
                if ($orderM[0]->status == 'pending' && $orderM[0]->state == 'new') {
                    $changeM = DB::connection('mysql_magento')->update('update `mg_sales_order` SET `status` = "processing",`state` = "processing" WHERE entity_id = ' . $order->magento_entity_id);
                    $changeM2 = DB::connection('mysql_magento')->update('update `mg_sales_order_status_history` SET `status` = "processing" WHERE parent_id = ' . $order->magento_entity_id);
                    $changeM3 = DB::connection('mysql_magento')->update('update `mg_sales_order_grid` SET `status` = "processing" WHERE entity_id = ' . $order->magento_entity_id);
                    echo 'order: ' . $order->id . ' has updated its status in magento<br>';
                }
            }
        }



        //Process shipping orders
        $orders = Order::where('fulfillment_status', 5)->whereNotNull('magento_order_id')->whereNotNull('magento_entity_id')->get();
        ECHO "<p>Shipping orders sync... (".count($orders).")</p>";
        foreach ($orders as $order) {
            $orderM = DB::connection('mysql_magento')->select('SELECT * FROM `mg_sales_order` WHERE entity_id = ' . $order->magento_entity_id);
            if (count($orderM)) {
                if ($orderM[0]->status == 'complete' && $orderM[0]->state == 'complete') {
                    $order->fulfillment_status = 6;
                    $order->financial_status = 2;
                    $order->save();
                    echo 'order: ' . $order->id . ' has updated its status<br>';
                }
            }
        }

        //Process closed orders
        
        $orders = Order::where('fulfillment_status', 5)->whereNotNull('magento_order_id')->whereNotNull('magento_entity_id')->get();
        ECHO "<p>Closed orders sync... (".count($orders).")</p>";
        foreach ($orders as $order) {
            $orderM = DB::connection('mysql_magento')->select('SELECT * FROM `mg_sales_order` WHERE entity_id = ' . $order->magento_entity_id);
            if (count($orderM)) {
                if ($orderM[0]->status == 'closed' && $orderM[0]->state == 'closed') {
                    $order->fulfillment_status = 6;
                    $order->financial_status = 2;
                    $order->save();
                    echo 'order: ' . $order->id . ' has updated its status<br>';
                }
            }
        }

        return 'success';
    }

  

    public static function GDSLOG($action, $message)
    {
        $log = date('Y-m-d H:i:s') . ' | ' .  $action . ' | ' . $message;
        Storage::disk('local')->append("gds/" . date('Y-m') . '.txt', $log);
    }


}
